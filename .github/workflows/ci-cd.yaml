name: Full DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run as dry-run (no deploy)?'
        required: false
        default: 'true'

env:
  AWS_REGION: us-east-2
  TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET }}
  CHART_BUCKET: ${{ secrets.CHART_BUCKET }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  quality-gates:
    name: Lint, Test, SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Dependencies
        run: |
          cd server && npm install --legacy-peer-deps
          cd ../client && npm install --legacy-peer-deps
          cd ..
      - name: Lint & Test
        run: |
          cd server && npm run lint && npm test || true
          cd ../client && npm run lint && npm test || true
          cd ..
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=gouthamyadavganta_fullstack-mern-app
            -Dsonar.organization=gouthamyadavganta
            -Dsonar.sources=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  tfsec:
    name: Terraform Security Scan (tfsec)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install tfsec
        run: |
          curl -sSL https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -o tfsec
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/
      - name: Run tfsec
        continue-on-error: true
        run: tfsec terraform-aws-infra/

  tflint:
    name: Terraform Lint (tflint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: Run tflint
        continue-on-error: true
        run: tflint --chdir=terraform-aws-infra

  build-and-push:
    name: Build & Push Docker Images
    needs: [quality-gates, tfsec, tflint]
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.dry_run == 'false' }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
      - name: Build & Push Server Image
        uses: docker/build-push-action@v4
        with:
          context: server
          push: true
          tags: |
            gantagouthamyadav/fullstack-server:${{ github.sha }}
            gantagouthamyadav/fullstack-server:latest
      - name: Build & Push Client Image
        uses: docker/build-push-action@v4
        with:
          context: client
          push: true
          tags: |
            gantagouthamyadav/fullstack-client:${{ github.sha }}
            gantagouthamyadav/fullstack-client:latest
      - name: Trivy Scan (Server)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: gantagouthamyadav/fullstack-server:${{ github.sha }}
      - name: Trivy Scan (Client)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: gantagouthamyadav/fullstack-client:${{ github.sha }}

  terraform:
    name: Terraform
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init & Plan or Apply
        working-directory: terraform-aws-infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform init -backend-config="bucket=${{ env.TFSTATE_BUCKET }}"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.dry_run }}" == "false" ]]; then
            terraform apply -auto-approve
          else
            terraform plan
          fi
  helm-release:
    name: Helm Lint/Template or Package/Push
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Helm
        uses: azure/setup-helm@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Helm Operation
        run: |
          cd fullstack-app
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.dry_run }}" == "false" ]]; then
            helm package . --version 0.1.${{ github.run_number }} --app-version ${{ github.sha }}
            aws s3 cp fullstack-app-0.1.${{ github.run_number }}.tgz s3://${{ env.CHART_BUCKET }}/
          else
            helm lint .
            helm template . --values values.yaml
          fi
  argocd-sync:
    name: Argo CD Sync
    needs: helm-release
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.dry_run == 'false' }}
    steps:
      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.10.7/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd
      - name: Argo CD Sync with Auth Token
        run: |
          ARGOCD_SERVER=${{ secrets.ARGOCD_SERVER }}
          argocd app sync fullstack-app \
            --server $ARGOCD_SERVER \
            --grpc-web \
            --insecure \
            --auth-token ${{ secrets.ARGOCD_TOKEN }}
          argocd app wait fullstack-app \
            --server $ARGOCD_SERVER \
            --grpc-web \
            --insecure \
            --auth-token ${{ secrets.ARGOCD_TOKEN }} \
            --health --operation --timeout 180 || echo "App is still progressing â€” continuing CI"
  helmfile-deploy:
    name: Helmfile Apply (Velero + Monitoring + Kubecost)
    needs: argocd-sync
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Helm & Helmfile
        run: |
          curl -sSL -o helmfile.tar.gz https://github.com/helmfile/helmfile/releases/download/v0.156.0/helmfile_0.156.0_linux_amd64.tar.gz
          tar -xzf helmfile.tar.gz
          chmod +x helmfile
          sudo mv helmfile /usr/local/bin/helmfile
          helm plugin install https://github.com/databus23/helm-diff || true

      - name: Install SOPS + age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          curl -sSL https://github.com/getsops/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64 -o sops
          chmod +x sops && sudo mv sops /usr/local/bin/sops

      - name: Set up kubeconfig from static token
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > ~/.kube/config

      - name: Add required Helm repos
        run: |
          helm repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Apply Velero CRDs (static YAML)
        run: |
          kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/velero/v1.12.4/config/crd/bases/velero.io_backups.yaml
          kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/velero/v1.12.4/config/crd/bases/velero.io_restores.yaml
          kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/velero/v1.12.4/config/crd/bases/velero.io_schedules.yaml
          kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/velero/v1.12.4/config/crd/bases/velero.io_backupstoragelocations.yaml
          kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/velero/v1.12.4/config/crd/bases/velero.io_volumesnapshotlocations.yaml

      - name: Apply Helmfile (Velero + Monitoring + Kubecost)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          cd fullstack-app
          helmfile -e dev apply
  healthcheck:
    name: Verify Deployment
    needs: helmfile-deploy
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.dry_run == 'false' }}
    steps:
      - name: Curl health endpoint
        run: curl --fail --max-time 5 http://fullstack.mernappproject.com/api/health || exit 1

  cypress-e2e:
    name: Cypress E2E Tests
    needs: healthcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run Cypress tests
        run: npx cypress run

