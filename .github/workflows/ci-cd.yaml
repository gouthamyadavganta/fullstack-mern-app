name: Full DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run as dry-run (no deploy)?'
        required: false
        default: 'true'

env:
  AWS_REGION: us-east-2
  TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET }}
  CHART_BUCKET: ${{ secrets.CHART_BUCKET }}

jobs:
  quality-gates:
    name: Lint, Test, SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          cd server && npm install --legacy-peer-deps
          cd ../client && npm install --legacy-peer-deps
          cd ..

      - name: Lint & Test
        run: |
          cd server && npm run lint && npm test || true
          cd ../client && npm run lint && npm test || true
          cd ..

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=gouthamyadavganta_fullstack-mern-app
            -Dsonar.organization=gouthamyadavganta
            -Dsonar.sources=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  build-and-push:
    name: Build & Push Docker Images
    needs: quality-gates
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.dry_run == 'false' }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Build & Push Server Image
        uses: docker/build-push-action@v4
        with:
          context: server
          push: true
          tags: gantagouthamyadav/fullstack-server:${{ github.sha }}

      - name: Build & Push Client Image
        uses: docker/build-push-action@v4
        with:
          context: client
          push: true
          tags: gantagouthamyadav/fullstack-client:${{ github.sha }}

  terraform:
    name: Terraform
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init & Plan or Apply
        working-directory: terraform-aws-infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform init -backend-config="bucket=${{ env.TFSTATE_BUCKET }}"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.dry_run }}" == "false" ]]; then
            terraform apply -auto-approve
          else
            terraform plan
          fi

  helm-release:
    name: Helm Lint/Template or Package/Push
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Helm Operation
        run: |
          cd fullstack-app
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.dry_run }}" == "false" ]]; then
            helm package . --version 0.1.${{ github.run_number }} --app-version ${{ github.sha }}
            aws s3 cp fullstack-app-0.1.${{ github.run_number }}.tgz s3://${{ env.CHART_BUCKET }}/
          else
            helm lint .
            helm template . --values values.yaml
          fi

  argocd-sync:
    name: Argo CD Sync
    needs: helm-release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.dry_run == 'false' }}
    steps:
      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.10.7/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Argo CD Sync with Token
        env:
          ARGOCD_OPTS: "--insecure --plaintext --grpc-web"
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --auth-token ${{ secrets.ARGOCD_TOKEN }}
          argocd app sync fullstack-app
          argocd app wait fullstack-app --health --operation --timeout 120

  healthcheck:
    name: Verify Deployment
    needs: argocd-sync
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.dry_run == 'false' }}
    steps:
      - name: Curl health endpoint
        run: |
          curl --fail http://fullstack.3.132.115.98.nip.io/api/posts || exit 1

