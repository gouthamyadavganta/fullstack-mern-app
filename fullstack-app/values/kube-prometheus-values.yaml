grafana:
  enabled: true
  adminPassword: prom-operator
  service:
    type: LoadBalancer
  defaultDashboardsEnabled: false
  sidecar:
    dashboards:
      enabled: false
      label: grafana_dashboard
      folder: /var/lib/grafana/dashboards/custom
  dashboards: {}
  dashboardsConfigMaps: {}
  additionalDataSources: []

prometheus:
  prometheusSpec:
    group_interval: 5m
    repeat_interval: 3h
    alertingEndpoints:
      - name: default
        namespace: monitoring
        port: web
    additionalArgs:
      - --web.enable-lifecycle
      - --web.enable-admin-api
      - --storage.tsdb.retention.time=7d
      - --scrape.sample-limit=100000
      - --scrape.body-size-limit=10MB
    additionalPrometheusRules:
      - name: silence-failing-alerts
        groups:
          - name: disable-bad-alerts
            rules:
              - alert: KubeStateMetricsWatchErrors
                expr: vector(0)
                labels:
                  severity: none
                annotations:
                  summary: "Silenced watch errors"
              - alert: PrometheusOperatorWatchErrors
                expr: vector(0)
                labels:
                  severity: none
                annotations:
                  summary: "Silenced operator watch errors"
              - alert: KubeAPIErrorBudgetBurn
                expr: vector(0)
                labels:
                  severity: none
                annotations:
                  summary: "Silenced API error budget"
              - alert: PrometheusOperatorReconcileErrors
                expr: vector(0)
                labels:
                  severity: none
                annotations:
                  summary: "Silenced reconcile errors"

defaultRules:
  create: true
  rules:
    etcd: false
    kubeApiserver: false
    kubeScheduler: false
    prometheus: false

prometheusRule:
  enabled: true
  ruleSelector:
    matchLabels:
      release: kps

alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname']
      group_wait: 30s
    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - send_resolved: true
            channel: '#alerts'
            username: 'prometheus'
            api_url: "{{ .Values.slack.webhook }}"

serviceMonitorSelectorNilUsesHelmValues: false
podMonitorSelectorNilUsesHelmValues: false

