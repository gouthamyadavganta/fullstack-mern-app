grafana:
  adminPassword: prom-operator
  service:
    type: LoadBalancer
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      folder: /var/lib/grafana/dashboards/custom
  dashboards:
    default:
      kubecost-dashboard:
        file: /var/lib/grafana/dashboards/custom/kubecost-dashboard.json

kubeStateMetrics:
  rbac:
    create: true
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    alertingEndpoints:
      - name: default
        namespace: monitoring
        port: web
    additionalArgs:
      - "--web.enable-lifecycle"
      - "--web.max-connections=512"
      - "--web.enable-admin-api"
      - "--storage.tsdb.max-block-duration=2h"
      - "--storage.tsdb.retention.time=7d"
    resources:
      requests:
        cpu: "300m"
        memory: "512Mi"
      limits:
        cpu: "600m"
        memory: "1Gi"

alertmanager:
  enabled: true
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 3h
      receiver: 'slack-notifications'
    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - send_resolved: true
            channel: '#alerts'
            username: 'prometheus'
            api_url: 'https://hooks.slack.com/services/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'

defaultRules:
  create: true
  rules:
    etcd: false
    kubeApiserver: false
    kubeScheduler: false

