grafana:
  enabled: true
  adminPassword: prom-operator
  service:
    type: LoadBalancer
  defaultDashboardsEnabled: false              # ðŸ”´ disable built-in dashboards
  sidecar:
    dashboards:
      enabled: false                           # ðŸ”´ disable auto-import from configmaps
      label: grafana_dashboard
      folder: /var/lib/grafana/dashboards/custom
  dashboards: {}                                # ðŸ”´ clears out all default dashboards
  dashboardsConfigMaps: {}                      # ðŸ”´ disables dashboard injection via Helm values
  additionalDataSources: []                     # optional: prevents Helm from injecting datasources

kubeStateMetrics:
  rbac:
    create: true
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"

prometheus:
  prometheusSpec:
    group_interval: 5m
    repeat_interval: 3h
    alertingEndpoints:
      - name: default
        namespace: monitoring
        port: web
    additionalArgs:
      - --web.enable-lifecycle
      - --web.max-connections=512
      - --web.enable-admin-api
      - --storage.tsdb.max-block-duration=2h
      - --storage.tsdb.retention.time=7d
      - --scrape.sample-limit=100000
      - --scrape.body-size-limit=10MB
    resources:
      requests:
        cpu: "300m"
        memory: "512Mi"
      limits:
        cpu: "600m"
        memory: "1Gi"
    additionalPrometheusRules:
      - name: silence-broken-alerts
        groups:
          - name: disable-kube-watch
            rules:
              - alert: KubeStateMetricsWatchErrors
                expr: vector(0)
                labels:
                  severity: none
                annotations:
                  summary: "Silenced via CI/CD override"
              - alert: PrometheusRemoteStorageFailures
                expr: vector(0)
                labels:
                  severity: none
                annotations:
                  summary: "Silenced: remote_write not in use"

prometheusRule:
  enabled: true
  ruleSelector:
    matchLabels:
      release: kps

defaultRules:
  create: true
  rules:
    etcd: false
    kubeApiserver: false
    kubeScheduler: false
    prometheus: false

alertmanager:
  enabled: true
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname']
      group_wait: 30s
    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - send_resolved: true
            channel: '#alerts'
            username: 'prometheus'
            api_url: 'https://hooks.slack.com/services/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'

serviceMonitorSelectorNilUsesHelmValues: false
podMonitorSelectorNilUsesHelmValues: false

